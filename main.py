import sqlite3
import logging
from aiogram import Bot, Dispatcher, executor, types
from aiogram.contrib.middlewares.logging import LoggingMiddleware
from aiogram.dispatcher import FSMContext
from aiogram.dispatcher.filters.state import State, StatesGroup
from aiogram.contrib.fsm_storage.memory import MemoryStorage
from aiogram.types import InlineKeyboardButton, InlineKeyboardMarkup, CallbackQuery
from aiogram.utils.callback_data import CallbackData
from database import create_tables, add_user, get_user_by_telegram_id, add_order, get_free_orders, update_order_status, add_response, get_responses_by_order_id, update_response_status

# –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è –±–æ—Ç–∞
API_TOKEN = '7264705176:AAFma9XWk3Xcc2rXUKGYSQX_Pz3xI5pfd8w'

logging.basicConfig(level=logging.INFO)

bot = Bot(token=API_TOKEN)
storage = MemoryStorage()
dp = Dispatcher(bot, storage=storage)
dp.middleware.setup(LoggingMiddleware())

# CallbackData –¥–ª—è —É–ø—Ä–∞–≤–ª–µ–Ω–∏—è —Ä–∞–∑–ª–∏—á–Ω—ã–º–∏ —ç—Ç–∞–ø–∞–º–∏
role_callback = CallbackData('role', 'type')
order_callback = CallbackData('order', 'action', 'order_id')
response_callback = CallbackData('response', 'action', 'response_id', 'order_id', 'executor_id')
completion_callback = CallbackData('completion', 'action', 'order_id', 'executor_id')

# –ü–∞–º—è—Ç—å –≤ —Ä–∞–º–∫–∞—Ö —Å–µ—Å—Å–∏–∏
user_data = {}
orders = []
order_responses = {}

# –û–ø—Ä–µ–¥–µ–ª—è–µ–º —Å–æ—Å—Ç–æ—è–Ω–∏—è
class OrderForm(StatesGroup):
    details = State()  # –°–æ—Å—Ç–æ—è–Ω–∏–µ –¥–ª—è –≤–≤–æ–¥–∞ –¥–µ—Ç–∞–ª–µ–π –∑–∞–∫–∞–∑–∞

class CompletionForm(StatesGroup):
    video = State()  # –°–æ—Å—Ç–æ—è–Ω–∏–µ –¥–ª—è –ø–æ–ª—É—á–µ–Ω–∏—è –≤–∏–¥–µ–æ –æ—Ç –∏—Å–ø–æ–ª–Ω–∏—Ç–µ–ª—è
    feedback = State()  # –°–æ—Å—Ç–æ—è–Ω–∏–µ –¥–ª—è –ø–æ–ª—É—á–µ–Ω–∏—è –∫–æ–º–º–µ–Ω—Ç–∞—Ä–∏–µ–≤ –æ—Ç –∑–∞–∫–∞–∑—á–∏–∫–∞

# –°—Ç–∞—Ä—Ç–æ–≤–∞—è –∫–æ–º–∞–Ω–¥–∞
@dp.message_handler(commands=['start'])
async def start_command(message: types.Message):
    create_tables()  # –°–æ–∑–¥–∞–µ–º —Ç–∞–±–ª–∏—Ü—ã –≤ –±–∞–∑–µ –¥–∞–Ω–Ω—ã—Ö, –µ—Å–ª–∏ –æ–Ω–∏ –µ—â–µ –Ω–µ —Å—É—â–µ—Å—Ç–≤—É—é—Ç
    keyboard = InlineKeyboardMarkup(row_width=2)
    keyboard.add(
        InlineKeyboardButton("üõ† –ò—Å–ø–æ–ª–Ω–∏—Ç–µ–ª—å", callback_data=role_callback.new(type='executor')),
        InlineKeyboardButton("üíº –ó–∞–∫–∞–∑—á–∏–∫", callback_data=role_callback.new(type='customer'))
    )
    await message.answer("–ü—Ä–∏–≤–µ—Ç! –ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –≤—ã–±–µ—Ä–∏—Ç–µ —Å–≤–æ—é —Ä–æ–ª—å:", reply_markup=keyboard)

# –û–±—Ä–∞–±–æ—Ç—á–∏–∫ –≤—ã–±–æ—Ä–∞ —Ä–æ–ª–∏
@dp.callback_query_handler(role_callback.filter())
async def process_role(callback_query: CallbackQuery, callback_data: dict):
    role = callback_data['type']
    user_id = callback_query.from_user.id
    username = callback_query.from_user.username

    user = get_user_by_telegram_id(user_id)
    if not user:
        user_data[user_id] = {'role': role, 'username': username}
        await callback_query.message.answer("–í–≤–µ–¥–∏—Ç–µ –≤–∞—à–µ –§–ò–û:")
        await callback_query.answer(f"–í—ã –≤—ã–±—Ä–∞–ª–∏ —Ä–æ–ª—å {'–ò—Å–ø–æ–ª–Ω–∏—Ç–µ–ª—è' if role == 'executor' else '–ó–∞–∫–∞–∑—á–∏–∫–∞'}")
    else:
        if role == 'executor':
            await executor_menu(callback_query.message)
        else:
            await customer_menu(callback_query.message)

@dp.message_handler(lambda message: message.from_user.id in user_data and 'name' not in user_data[message.from_user.id])
async def process_name(message: types.Message):
    user_id = message.from_user.id
    name = message.text.strip()

    if not name or len(name.split()) < 2 or not all(part.isalpha() for part in name.split()):
        await message.answer("–ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –≤–≤–µ–¥–∏—Ç–µ –∫–æ—Ä—Ä–µ–∫—Ç–Ω–æ–µ –§–ò–û (–Ω–∞–ø—Ä–∏–º–µ—Ä, –ò–≤–∞–Ω –ò–≤–∞–Ω–æ–≤).")
        return

    user_data[user_id]['name'] = name

    if user_data[user_id]['role'] == 'executor':
        await message.answer("–í–≤–µ–¥–∏—Ç–µ –≤–∞—à –æ–ø—ã—Ç —Ä–∞–±–æ—Ç—ã –≤ –≥–æ–¥–∞—Ö:")
    else:
        add_user(user_id, user_data[user_id]['role'], user_data[user_id]['name'], None, None, user_data[user_id]['username'])
        await message.answer("–û—Ç–ª–∏—á–Ω–æ! –í—ã –∑–∞—Ä–µ–≥–∏—Å—Ç—Ä–∏—Ä–æ–≤–∞–Ω—ã –∫–∞–∫ –ó–∞–∫–∞–∑—á–∏–∫ üíº")
        await customer_menu(message)


@dp.message_handler(lambda message: message.from_user.id in user_data and 'experience' not in user_data[message.from_user.id] and user_data[message.from_user.id]['role'] == 'executor')
async def process_experience(message: types.Message):
    user_id = message.from_user.id
    experience = message.text.strip()

    if not experience.isdigit() or int(experience) < 0:
        await message.answer("–ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –≤–≤–µ–¥–∏—Ç–µ –∫–æ—Ä—Ä–µ–∫—Ç–Ω—ã–π –æ–ø—ã—Ç —Ä–∞–±–æ—Ç—ã –≤ –≥–æ–¥–∞—Ö (–Ω–∞–ø—Ä–∏–º–µ—Ä, 5).")
        return

    user_data[user_id]['experience'] = experience
    await message.answer("–ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –æ—Ç–ø—Ä–∞–≤—å—Ç–µ –ø—Ä–∏–º–µ—Ä –≤–∞—à–∏—Ö —Ä–∞–±–æ—Ç (—Å—Å—ã–ª–∫–∞ –∏–ª–∏ –≤–∏–¥–µ–æ):")

# –ì–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é –¥–ª—è –ó–∞–∫–∞–∑—á–∏–∫–∞
async def customer_menu(message: types.Message):
    keyboard = InlineKeyboardMarkup(row_width=1)
    keyboard.add(
        InlineKeyboardButton("‚ûï –°–æ–∑–¥–∞—Ç—å –Ω–æ–≤—ã–π –∑–∞–∫–∞–∑", callback_data=order_callback.new(action='create', order_id='0'))
    )
    await message.answer("–ì–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é –ó–∞–∫–∞–∑—á–∏–∫–∞:", reply_markup=keyboard)

# –ì–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é –¥–ª—è –ò—Å–ø–æ–ª–Ω–∏—Ç–µ–ª—è
async def executor_menu(message: types.Message):
    keyboard = InlineKeyboardMarkup(row_width=1)
    keyboard.add(
        InlineKeyboardButton("üîç –ü—Ä–æ—Å–º–æ—Ç—Ä–µ—Ç—å –∑–∞–∫–∞–∑—ã", callback_data=order_callback.new(action='view', order_id='0'))
    )
    await message.answer("–ì–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é –ò—Å–ø–æ–ª–Ω–∏—Ç–µ–ª—è:", reply_markup=keyboard)

# –°–æ–∑–¥–∞–Ω–∏–µ –Ω–æ–≤–æ–≥–æ –∑–∞–∫–∞–∑–∞
@dp.callback_query_handler(order_callback.filter(action='create'))
async def create_order(callback_query: CallbackQuery):
    await callback_query.message.answer(
        "–ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –∑–∞–ø–æ–ª–Ω–∏—Ç–µ –±—Ä–∏—Ñ: (—É–∫–∞–∂–∏—Ç–µ —Å—Ä–æ–∫–∏, —Å—Ç–æ–∏–º–æ—Å—Ç—å, –ª–æ–∫–∞—Ü–∏—é, –æ—Å–æ–±–µ–Ω–Ω–æ—Å—Ç–∏ —Å—ä–µ–º–∫–∏ –∏ —Ç.–¥.)")
    await OrderForm.details.set()
    await callback_query.answer()

# –û–±—Ä–∞–±–æ—Ç–∫–∞ –≤–≤–æ–¥–∞ –¥–µ—Ç–∞–ª–µ–π –∑–∞–∫–∞–∑–∞
@dp.message_handler(state=OrderForm.details)
async def order_details(message: types.Message, state: FSMContext):
    details = message.text.strip()

    if len(details) < 10:
        await message.answer("–ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –≤–≤–µ–¥–∏—Ç–µ –±–æ–ª–µ–µ –ø–æ–¥—Ä–æ–±–Ω–æ–µ –æ–ø–∏—Å–∞–Ω–∏–µ –∑–∞–∫–∞–∑–∞ (–º–∏–Ω–∏–º—É–º 10 —Å–∏–º–≤–æ–ª–æ–≤).")
        return

    keyboard = InlineKeyboardMarkup(row_width=1)
    keyboard.add(
        InlineKeyboardButton("‚ûï –°–æ–∑–¥–∞—Ç—å –Ω–æ–≤—ã–π –∑–∞–∫–∞–∑", callback_data=order_callback.new(action='create', order_id='0'))
    )
    user = get_user_by_telegram_id(message.from_user.id)
    add_order(user[0], details)  # –ò—Å–ø–æ–ª—å–∑—É–µ–º ID –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è –∏–∑ –±–∞–∑—ã –¥–∞–Ω–Ω—ã—Ö
    await message.answer("–í–∞—à –∑–∞–∫–∞–∑ —Å–æ–∑–¥–∞–Ω! –ò—Å–ø–æ–ª–Ω–∏—Ç–µ–ª–∏ —Å–º–æ–≥—É—Ç –µ–≥–æ —É–≤–∏–¥–µ—Ç—å.", reply_markup=keyboard)
    await state.finish()

# –ü—Ä–æ—Å–º–æ—Ç—Ä –∑–∞–∫–∞–∑–æ–≤ –∏—Å–ø–æ–ª–Ω–∏—Ç–µ–ª–µ–º
@dp.callback_query_handler(order_callback.filter(action='view'))
async def view_orders(callback_query: CallbackQuery, callback_data: dict):
    current_order_id = int(callback_data['order_id'])
    free_orders = get_free_orders()

    if current_order_id >= len(free_orders):
        await callback_query.answer("–ë–æ–ª—å—à–µ –∑–∞–∫–∞–∑–æ–≤ –Ω–µ—Ç.")
        return

    order = free_orders[current_order_id]
    keyboard = InlineKeyboardMarkup(row_width=2)
    if current_order_id > 0:
        keyboard.add(InlineKeyboardButton("‚¨ÖÔ∏è –ù–∞–∑–∞–¥", callback_data=order_callback.new(action='view', order_id=str(current_order_id - 1))))
    if current_order_id < len(free_orders) - 1:
        keyboard.add(InlineKeyboardButton("‚û°Ô∏è –í–ø–µ—Ä–µ–¥", callback_data=order_callback.new(action='view', order_id=str(current_order_id + 1))))

    # –û–±—Ä–∞—Ç–∏—Ç–µ –≤–Ω–∏–º–∞–Ω–∏–µ –Ω–∞ –ø–µ—Ä–µ–¥–∞—á—É —Ç–æ–ª—å–∫–æ 5 –∞—Ä–≥—É–º–µ–Ω—Ç–æ–≤, –∫–∞–∫ –±—ã–ª–æ —É–∫–∞–∑–∞–Ω–æ –≤ response_callback
    keyboard.add(InlineKeyboardButton("üì© –û—Ç–∫–ª–∏–∫–Ω—É—Ç—å—Å—è", callback_data=response_callback.new(
        action='respond',
        response_id='0',
        order_id=str(order[0]),
        executor_id=str(callback_query.from_user.id)
    )))

    await callback_query.message.edit_text(
        f"–ó–∞–∫–∞–∑ {current_order_id + 1}:\n\n"
        f"üìã –û–ø–∏—Å–∞–Ω–∏–µ: {order[2]}\n",
        reply_markup=keyboard
    )
    await callback_query.answer()

# –û–±—Ä–∞–±–æ—Ç–∫–∞ –æ—Ç–∫–ª–∏–∫–∞ –Ω–∞ –∑–∞–∫–∞–∑
@dp.callback_query_handler(response_callback.filter(action='respond'))
async def respond_to_order(callback_query: CallbackQuery, callback_data: dict):
    order_id = int(callback_data['order_id'])
    executor_id = int(callback_data['executor_id'])

    add_response(order_id, executor_id)

    order = get_responses_by_order_id(order_id)
    customer_id = order[0][2]
    executor = get_user_by_telegram_id(executor_id)

    await bot.send_message(customer_id,
        f"–ù–æ–≤—ã–π –æ—Ç–∫–ª–∏–∫ –Ω–∞ –≤–∞—à –∑–∞–∫–∞–∑!\n\n"
        f"üë§ –ò–º—è: {executor[3]}\n"
        f"üîó –ü–æ—Ä—Ç—Ñ–æ–ª–∏–æ: {executor[5]}\n"
        f"–°–≤—è–∑–∞—Ç—å—Å—è: @{executor[6]}\n\n"
        f"–ü—Ä–∏–Ω—è—Ç—å –∏—Å–ø–æ–ª–Ω–∏—Ç–µ–ª—è?",
        reply_markup=InlineKeyboardMarkup().add(
            InlineKeyboardButton("‚úÖ –ü—Ä–∏–Ω—è—Ç—å", callback_data=response_callback.new(action='accept', response_id='0', order_id=str(order_id), executor_id=str(executor_id))),
            InlineKeyboardButton("‚ùå –û—Ç–∫–ª–æ–Ω–∏—Ç—å", callback_data=response_callback.new(action='reject', response_id='0', order_id=str(order_id), executor_id=str(executor_id)))
        )
    )
    await callback_query.answer("–û—Ç–∫–ª–∏–∫ –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω –∑–∞–∫–∞–∑—á–∏–∫—É.")

# –û–±—Ä–∞–±–æ—Ç–∫–∞ –≤—ã–±–æ—Ä–∞ –∑–∞–∫–∞–∑—á–∏–∫–∞ (–ø—Ä–∏–Ω—è—Ç—å –∏–ª–∏ –æ—Ç–∫–ª–æ–Ω–∏—Ç—å –∏—Å–ø–æ–ª–Ω–∏—Ç–µ–ª—è)
@dp.callback_query_handler(response_callback.filter(action=['accept', 'reject']))
async def process_customer_choice(callback_query: CallbackQuery, callback_data: dict):
    order_id = int(callback_data['order_id'])
    executor_id = int(callback_data['executor_id'])
    action = callback_data['action']

    if action == 'accept':
        update_order_status(order_id, 'occupied')  # –û–±–Ω–æ–≤–ª–µ–Ω–∏–µ —Å—Ç–∞—Ç—É—Å–∞ –∑–∞–∫–∞–∑–∞
        await bot.send_message(executor_id, "–ü–æ–∑–¥—Ä–∞–≤–ª—è–µ–º! –í–∞—Å –≤—ã–±—Ä–∞–ª–∏ –¥–ª—è –≤—ã–ø–æ–ª–Ω–µ–Ω–∏—è –∑–∞–∫–∞–∑–∞. –°–≤—è–∂–∏—Ç–µ—Å—å —Å –∑–∞–∫–∞–∑—á–∏–∫–æ–º –¥–ª—è –¥–∞–ª—å–Ω–µ–π—à–∏—Ö –¥–µ–π—Å—Ç–≤–∏–π.", reply_markup=InlineKeyboardMarkup().add(
            InlineKeyboardButton("‚úÖ –ó–∞–≤–µ—Ä—à–∏—Ç—å –∑–∞–∫–∞–∑", callback_data=completion_callback.new(action='complete', order_id=str(order_id), executor_id=str(executor_id)))
        ))
        await callback_query.message.edit_text("–í—ã –ø—Ä–∏–Ω—è–ª–∏ –∏—Å–ø–æ–ª–Ω–∏—Ç–µ–ª—è –Ω–∞ –∑–∞–∫–∞–∑.")
    elif action == 'reject':
        await bot.send_message(executor_id, "–ö —Å–æ–∂–∞–ª–µ–Ω–∏—é, –∑–∞–∫–∞–∑—á–∏–∫ –≤—ã–±—Ä–∞–ª –¥—Ä—É–≥–æ–≥–æ –∏—Å–ø–æ–ª–Ω–∏—Ç–µ–ª—è.")
        await callback_query.message.edit_text("–í—ã –æ—Ç–∫–ª–æ–Ω–∏–ª–∏ –∏—Å–ø–æ–ª–Ω–∏—Ç–µ–ª—è –Ω–∞ –∑–∞–∫–∞–∑.")

    await callback_query.answer()

# –ó–∞–≤–µ—Ä—à–µ–Ω–∏–µ –∑–∞–∫–∞–∑–∞ –∏—Å–ø–æ–ª–Ω–∏—Ç–µ–ª–µ–º
@dp.callback_query_handler(completion_callback.filter(action='complete'))
async def complete_order(callback_query: CallbackQuery, callback_data: dict, state: FSMContext):
    order_id = int(callback_data['order_id'])
    executor_id = int(callback_data['executor_id'])

    await callback_query.message.answer("–ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –∑–∞–≥—Ä—É–∑–∏—Ç–µ –≤–∏–¥–µ–æ –¥–ª—è –∑–∞–≤–µ—Ä—à–µ–Ω–∏—è –∑–∞–∫–∞–∑–∞.")
    await CompletionForm.video.set()  # –£—Å—Ç–∞–Ω–∞–≤–ª–∏–≤–∞–µ–º —Å–æ—Å—Ç–æ—è–Ω–∏–µ –¥–ª—è –ø–æ–ª—É—á–µ–Ω–∏—è –≤–∏–¥–µ–æ
    await state.update_data(order_id=order_id, executor_id=executor_id)
    await callback_query.answer()

@dp.message_handler(content_types=types.ContentTypes.ANY, state=CompletionForm.video)
async def receive_video(message: types.Message, state: FSMContext):
    if message.content_type != 'video':
        await message.answer("–ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –æ—Ç–ø—Ä–∞–≤—å—Ç–µ –≤–∏–¥–µ–æ—Ñ–∞–π–ª.")
        return

    data = await state.get_data()
    order_id = data['order_id']
    executor_id = data['executor_id']
    video_file_id = message.video.file_id

    # –ü–æ–ª—É—á–∞–µ–º —Å–ø–∏—Å–æ–∫ –æ—Ç–≤–µ—Ç–æ–≤ –¥–ª—è –∑–∞–∫–∞–∑–∞
    responses = get_responses_by_order_id(order_id)

    if responses:
        response = responses[0]
        customer_id = response[2]  # –ü—Ä–µ–¥–ø–æ–ª–∞–≥–∞–µ—Ç—Å—è, —á—Ç–æ —ç—Ç–æ –ø–æ–ª–µ customer_id

        # –°–æ–∑–¥–∞–µ–º –∫–ª–∞–≤–∏–∞—Ç—É—Ä—É –¥–ª—è –ø–æ–¥—Ç–≤–µ—Ä–∂–¥–µ–Ω–∏—è –∏–ª–∏ –æ—Ç–∫–ª–æ–Ω–µ–Ω–∏—è –∑–∞–∫–∞–∑–∞
        keyboard = InlineKeyboardMarkup(row_width=2)
        keyboard.add(
            InlineKeyboardButton("‚úÖ –ü—Ä–∏–Ω—è—Ç—å", callback_data=completion_callback.new(action='approve', order_id=str(order_id), executor_id=str(executor_id))),
            InlineKeyboardButton("‚ùå –û—Ç–∫–ª–æ–Ω–∏—Ç—å", callback_data=completion_callback.new(action='reject', order_id=str(order_id), executor_id=str(executor_id)))
        )

        # –û—Ç–ø—Ä–∞–≤–ª—è–µ–º –≤–∏–¥–µ–æ –∑–∞–∫–∞–∑—á–∏–∫—É
        await bot.send_video(customer_id, video=video_file_id, caption="–ò—Å–ø–æ–ª–Ω–∏—Ç–µ–ª—å –∑–∞–≤–µ—Ä—à–∏–ª –∑–∞–∫–∞–∑. –ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –ø—Ä–æ–≤–µ—Ä—å—Ç–µ —Ä–µ–∑—É–ª—å—Ç–∞—Ç.", reply_markup=keyboard)
        await message.answer("–í–∏–¥–µ–æ –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω–æ –∑–∞–∫–∞–∑—á–∏–∫—É –Ω–∞ –ø—Ä–æ–≤–µ—Ä–∫—É.")
    else:
        await message.answer("–û—à–∏–±–∫–∞: –Ω–µ —É–¥–∞–ª–æ—Å—å –Ω–∞–π—Ç–∏ –∑–∞–∫–∞–∑—á–∏–∫–∞.")
        print(f"Debug info: responses = {responses}")

    await state.finish()

# –û–±—Ä–∞–±–æ—Ç–∫–∞ –ø—Ä–∏–Ω—è—Ç–∏—è –∏–ª–∏ –æ—Ç–∫–ª–æ–Ω–µ–Ω–∏—è –∑–∞–∫–∞–∑–∞ –∑–∞–∫–∞–∑—á–∏–∫–æ–º
@dp.callback_query_handler(completion_callback.filter(action=['approve', 'reject']))
async def handle_customer_feedback(callback_query: CallbackQuery, callback_data: dict, state: FSMContext):
    order_id = int(callback_data['order_id'])
    executor_id = int(callback_data['executor_id'])
    action = callback_data['action']

    if action == 'approve':
        update_order_status(order_id, 'completed')
        await bot.send_message(executor_id, "–ó–∞–∫–∞–∑—á–∏–∫ –ø—Ä–∏–Ω—è–ª –≤–∞—à –∑–∞–∫–∞–∑. –†–∞–±–æ—Ç–∞ –∑–∞–≤–µ—Ä—à–µ–Ω–∞.")
        await callback_query.message.edit_text("–í—ã –ø—Ä–∏–Ω—è–ª–∏ —Ä–µ–∑—É–ª—å—Ç–∞—Ç. –ó–∞–∫–∞–∑ –∑–∞–≤–µ—Ä—à–µ–Ω.")
    elif action == 'reject':
        await callback_query.message.answer("–ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –Ω–∞–ø–∏—à–∏—Ç–µ –∑–∞–º–µ—á–∞–Ω–∏—è –∫ —Ä–∞–±–æ—Ç–µ.")
        await CompletionForm.feedback.set()
        await state.update_data(order_id=order_id, executor_id=executor_id)
        await callback_query.answer()

@dp.message_handler(state=CompletionForm.feedback)
async def handle_feedback(message: types.Message, state: FSMContext):
    feedback = message.text.strip()

    if len(feedback) < 5:
        await message.answer("–ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –≤–≤–µ–¥–∏—Ç–µ –±–æ–ª–µ–µ –ø–æ–¥—Ä–æ–±–Ω—ã–µ –∑–∞–º–µ—á–∞–Ω–∏—è (–º–∏–Ω–∏–º—É–º 5 —Å–∏–º–≤–æ–ª–æ–≤).")
        return

    data = await state.get_data()
    executor_id = data['executor_id']

    await bot.send_message(executor_id, f"–ó–∞–∫–∞–∑—á–∏–∫ –æ—Ç–∫–ª–æ–Ω–∏–ª –≤–∞—à –∑–∞–∫–∞–∑ —Å –∑–∞–º–µ—á–∞–Ω–∏—è–º–∏: {feedback}")
    await message.answer("–ó–∞–º–µ—á–∞–Ω–∏—è –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω—ã –∏—Å–ø–æ–ª–Ω–∏—Ç–µ–ª—é.")
    await state.finish()



if __name__ == '__main__':
    executor.start_polling(dp, skip_updates=True)
